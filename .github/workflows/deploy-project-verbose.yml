name: "Deployment - INFRA"

on:
  pull_request:
    branches:
      - develop
      - staging
      - main
    types:
      - opened
      - synchronize
      - closed

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
  AWS_DEFAULT_REGION: us-east-1
  PROJECT_PATH: projects/client-services-infra

jobs:
  algo:
    name: Faz algo
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - run: echo bla

  deploy:
    name: Infra Deployment
    timeout-minutes: 10
    permissions:
      contents: read
      pull-requests: write
    needs:
      - algo
    runs-on: ubuntu-latest
    env:
      TF_WORKSPACE: ${{ (github.event.pull_request.base.ref  == 'main' && 'prd') || ((github.event.pull_request.base.ref == 'staging' && 'stg') || 'dev') }}
    environment:
      name: ${{ (github.event.pull_request.head.ref  == 'main' && 'production') || ((github.event.pull_request.head.ref == 'staging' && 'stage') || 'development') }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: ${{env.PROJECT_PATH}}/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup Teraform environment
        env:
          ENVIRONMENT: ${{ env.TF_WORKSPACE }}
        run: scripts/cli --tfvars
        
      - name: Terraform Init
        working-directory: ${{env.PROJECT_PATH}}
        run: terraform init -upgrade

      - name: Terraform Validate
        working-directory: ${{env.PROJECT_PATH}}
        run: terraform validate
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} 
          aws-region: ${{env.AWS_DEFAULT_REGION}}

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        working-directory: ${{env.PROJECT_PATH}}
        run: terraform plan -no-color
        continue-on-error: true
# 
      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `
            ### Terraform Status
            ---
            - Format and Style üñå: \`${{ steps.fmt.outcome }}\`
            - Initialization ‚öôÔ∏è: \`${{ steps.init.outcome }}\`
            - Plan üìñ: \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>
            \`\`\`terraform

            ${{ steps.plan.outputs.stdout }}
            
            \`\`\`
            </details>

            ---
            - *Pusher:* @${{ github.actor }}
            - *Action:* \`${{ github.event_name }}\`
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.event.pull_request.merged == true || contains(github.event.head_commit.message, 'deploy')
        working-directory: ${{env.PROJECT_PATH}}
        run: terraform apply -destroy -auto-approve
